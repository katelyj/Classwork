4/19/17
Aim: Lists, comprendo?

List Comprehensions
     - Programming construct for building lists out of existing lists
     - Basic syntax:

        [ <value> for <var> in <list> ]

	How could you make a list of squares?

	    [ x*x for x in range(10) ]

     - Conditional comprehensions:

        [ <value> for <var> in <list> if <condition> ]
    
    	Make a list of all multiples of 2 from 2 to 100

	     range(2, 100, 2)
	     [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30,
	     32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60,
	     62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90,
	     92, 94, 96, 98]

	Make a list of all multiples of 3 from 2 to 100

	     range(3, 100, 3)
	     [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51,
	     54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99]	

	Make a list of all the composite numbers from 2 to 100
	
	(repeats are allowed)

	


E.g.

    >>> [5 for x in range(10)]
    	[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
    
    >>> [x for x in range(10)]
    	[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    
    >>> range(10)
    	[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    
    >>> [x*x for x in range(10)]
    	[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

    >>> [(x, x*x) for x in range(10)]
    	[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16),
	(5, 25), (6, 36), (7, 49), (8, 64), (9, 81)]
	
    >>> [{x: x*x} for x in range(10)]
	[{0: 0}, {1: 1}, {2: 4}, {3: 9}, {4: 16},
	{5: 25}, {6: 36}, {7: 49}, {8: 64}, {9: 81}]

    >>> [x*x for x in range(10) if x % 2 == 1]
    	[1, 9, 25, 49, 81]

    >>> [77 for x in range(10) if x % 2 == 1]
    	[77, 77, 77, 77, 77]
	
    >>> [x for x in range(10) if x % 2 == 1]
    	[1, 3, 5, 7, 9]

    java / C example: a = a<0 ? 0:a
    python example: a = 0 if a<0 else a

    >>> [x if x % 2 == 1 else 0 for x in range(10)]
    	[0, 1, 0, 3, 0, 5, 0, 7, 0, 9]

    >>> [x*x if x % 2 == 1 else 0 for x in range(10) if x*x > 30]
    	[0, 49, 0, 81]
